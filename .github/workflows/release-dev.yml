name: Dev - Nightly if new stuff is pushed

on: 
  schedule:
    #every day at midnight
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        type: choice
        required: true
        default: 'patch'
        options:
          - minor
          - patch

    
permissions:
  contents: write

jobs:
  build-dev:
    name: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Build and release
        id: goreleaser
        uses: goreleaser/goreleaser-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: true
        with:
          version: "~> v2"
          distribution: goreleaser
          args: release --snapshot --clean
      - name: Grab dev release version from metadata
        id: version
        run: |
          jq . ./dist/metadata.json
          version=$(jq -r '.version' ./dist/metadata.json)
          echo "verson:$version"
          echo "version=$version" >> $GITHUB_OUTPUT
      - name: Grab changelog md from current
        id: changelog
        run: |
          CHANGELOG_DETAILS=""
          for file in changelog/current/*.md; do
            # Append the content of each file.
            # You might want to add a header for each file for better readability,
            # e.g., "## $(basename "$file" .md)\n\n$(cat "$file")\n"
            CHANGELOG_DETAILS="${CHANGELOG_DETAILS}$(cat \"$file\")\n"
          done

          # Set the combined content as a multi-line environment variable
          # This makes it available to subsequent steps via ${{ env.CHANGELOG_DETAILS }}
          echo "CHANGELOG_DETAILS<<EOF" >> $GITHUB_ENV
          echo -e "$CHANGELOG_DETAILS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: write out
        run: |
          echo "$CHANGELOG_DETAILS"
      # - name: Upload Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: polyenv-dev
      #     path: dist/*
      # - name: Upload Contents to Release
      #   uses: svenstaro/upload-release-action@v2
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file: dist/*
      #     tag: ${{ steps.version.outputs.version }}
      #     release_name: Dev Release ${{ steps.version.outputs.version }}
      #     file_glob: true
      #     prerelease: true
      #     overwrite: true
      #     body: |
      #       # DEV RELEASE

      #       release created by github action @ ${{ github.event.head_commit.timestamp }}
      #       THIS IS A DEV RELEASE. DO NOT USE THIS IN PRODUCTION. or do.. i don't care
      #     make_latest: false