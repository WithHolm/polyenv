name: Main - Release
on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        type: choice
        required: true
        default: 'patch'
        options:
          - none
          - patch
          - minor
  # push:
  #   branches: [ "main" ]
  #   tags:
  #     - "v*.*.*" # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  goreleaser_version: ~> v2
  goreleaser_dist: goreleaser

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Check for correct repository
        if: ${{ github.event_name != 'workflow_dispatch' && github.repository != 'withholm/polyenv' }}
        run: |
          echo "Should only run in the withholm/polyenv repository"
          exit 1

      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true
      
      - name: get latest tag that is v.*.*
        id: get-latest-tag
        run: |
          latest_tag=$(git tag --sort="v:refname" | tail -1)
          echo "Found latest tag: $latest_tag"
          echo "tag=$latest_tag" >> $GITHUB_OUTPUT
      
      - name: Bump version
        id: bump_version
        run: |
          current_version=${{ steps.get-latest-tag.outputs.tag }}
          # Strip 'v' prefix if it exists
          current_version=${current_version#v}

          IFS='.' read -r -a version_parts <<< "$current_version"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}

          case "${{ github.event.inputs.version_bump }}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac

          new_version="v$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "version: $new_version"

      # - name: Create and push tag
      #   if: ${{ github.event.inputs.version_bump != 'none' }}
      #   run: |
      #     git tag ${{ steps.bump_version.outputs.new_version }}
      #     git push origin ${{ steps.bump_version.outputs.new_version }}

      # - name: Build and release
      #   id: goreleaser
      #   uses: goreleaser/goreleaser-action@v6
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     CI: true
      #   with:
      #     version: "~> v2"
      #     distribution: goreleaser
      #     args: build --clean --verbose
      # - name: Build and release
      #   id: goreleaser
      #   uses: goreleaser/goreleaser-action@v6
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     version: ${{ env.goreleaser_version }}
      #     distribution: ${{ env.goreleaser_dist }}
      #     args: release --clean --verbose --draft



