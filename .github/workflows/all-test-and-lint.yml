name: Pull Request Tester

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'go.mod'
      - 'go.sum'
      - '**/*.go'

env:
  LicenseHeaderPath: "./LicenseHeader"

jobs:
  lint:
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true
      - name: Run linter
        uses: golangci/golangci-lint-action@v8
        continue-on-error: true
        with:
          version: latest

  
  changed-packages:
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    outputs:
      should_test: ${{steps.concat_paths.outputs.RunTests}}
      paths: ${{steps.concat_paths.outputs.path}}
      mod_test: ${{steps.changed_mod_files.outputs.any_changed}}
      go_test: ${{steps.changed_go_files.outputs.any_changed}}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Changed mod files
        id: changed_mod_files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            go.mod
            go.sum

      - name: Changed go files
        id: changed_go_files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            **/*_test.go
            **/*.go
          files_ignore: |
            vendor/**

      - name: Get unique directories for changed .go files
        id: concat_paths

        env:
          modChanged: ${{ steps.changed_mod_files.outputs.any_changed }}
          modChangedFiles: "cmd/... ./internal/..."
          goChanged: ${{ steps.changed_go_files.outputs.any_changed }}
          goChangedFiles: ${{ steps.changed_go_files.outputs.all_changed_files }}
        run: |
          path=""
          RunTests=false
          if [[ $modChanged == "true" ]]; then
            path=$modChangedFiles
            RunTests=true
          elif [[ $goChanged == "true" ]]; then
            path=$goChangedFiles
            RunTests=true
          fi
          echo "path=$path" >> $GITHUB_OUTPUT
          echo "RunTests=$RunTests" >> $GITHUB_OUTPUT
  
  # all paths should be set as a single string, separated by space. this wall all tests tests all files in a single pass
  # limits any ci to a single "run" compared to the matrix strategy. saves alot of time and resources
  test:
    needs: [changed-packages]
    if: needs.changed-packages.outputs.should_test == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true
      - name: install tools
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Prepare Package Paths
        id: prep_packages
        shell: bash
        run: |
          FILE_PATHS="${{ needs.changed-packages.outputs.paths }}"
          PACKAGE_PATHS=""
          # If go.mod changed, the paths are already package patterns, so use them directly.
          if [[ "${{ needs.changed-packages.outputs.mod_test }}" == "true" ]]; then
            PACKAGE_PATHS=$FILE_PATHS
          else
            # Convert file list to a unique directory list, excluding the root directory './.'
            PACKAGE_PATHS=$(echo "$FILE_PATHS" | tr ' ' '\n' | xargs -I {} dirname {} | sort -u | grep -v -x "\." | sed 's|.*|./&|' | xargs)
          fi
          echo "Prepared Package Paths: $PACKAGE_PATHS"
          echo "package_paths=$PACKAGE_PATHS" >> "$GITHUB_OUTPUT"
      - name: Run staticcheck
        id: staticcheck
        run: |
          staticcheck ./...
      - name: Run tests
        id : test
        run: |
          go test -race ${{ steps.prep_packages.outputs.package_paths}}
      - name: Run govulncheck
        id : check-vuln
        run: |
          govulncheck -show verbose ${{ steps.prep_packages.outputs.package_paths}}

      - name: Check File Header for License
        id : check-license
        run: |
          # 1. Validate that the path variable is set and the file exists
          if [ -z "$LicenseHeaderPath" ]; then
            echo "::error::Required 'LicenseHeaderPath' environment variable is not set."
            exit 1
          fi
          if [ ! -f "$LicenseHeaderPath" ]; then
            echo "::error::License header file not found at '$LicenseHeaderPath'."
            exit 1
          fi

          # 2. Read the expected license string from the file
          LICENSE_STRING=$(cat "$LicenseHeaderPath")

          # 3. Get the space-delimited list of files to check
          path="${{ needs.changed-packages.outputs.paths }}"
          
          echo "Checking for license header in the following files:"
          echo "$path"
          echo "---"

          # 4. Loop through files and check the first 20 lines for the license string
          for file in $path; do
            if [[ "$file" != *.go ]]; then
              echo "Skipping non-Go file: $file"
              continue
            fi

            echo "Checking: $file"
            if ! head -n 20 "$file" | grep -q -F -i "$LICENSE_STRING"; then
              echo "::error file=$file::File does not contain the required license header in its first 20 lines."
              exit 1
            fi
          done
          
          echo "---"
          echo "Success! All checked files contain the license header."

