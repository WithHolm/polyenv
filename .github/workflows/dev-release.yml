name: Dev - Release - Nigtly sceduled

on: 
  schedule:
    #every day at midnight
    - cron: '0 0 * * *'
  workflow_dispatch:
    
permissions:
  contents: write

env:
  release_name: Nightly release
  release_tag : nightly

jobs:
  #precheck: checks if previous build has another sha than the one im currently on
  check-for-updates:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check-commits.outputs.should_build }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: dev
          fetch-depth: 0
      - name: Get last nightly release commit SHA
        id: get-last-release-sha
        uses: actions/github-script@v8
        with:
          script: |
            const { owner, repo } = context.repo;
            let lastReleaseSha = '';

            try {
              // List releases, filter by 'nightly' tag or name, and get the latest
              const { data: releases } = await github.rest.repos.listReleases({
                owner,
                repo,
                per_page: 100 // Fetch enough releases to find the latest 'nightly'
              });

              const nightlyRelease = releases.find(release => release.tag_name === '${{ env.release_tag }}' || release.name === '${{ env.release_name }}');

              if (nightlyRelease) {
                // Get the commit SHA associated with this release's tag
                const { data: tag } = await github.rest.git.getRef({
                  owner,
                  repo,
                  ref: `tags/${nightlyRelease.tag_name}`,
                });
                lastReleaseSha = tag.object.sha;
                console.log(`Last 'nightly' release SHA: ${lastReleaseSha}`);
              } else {
                console.log('No "nightly" release found.');
              }
            } catch (error) {
              console.error(`Error fetching releases: ${error.message}`);
            }

            core.setOutput('last_release_sha', lastReleaseSha);
      #Check if there are any new commits since the last successful build
      - name: Check for new commits
        id: check-commits
        run: |
          CURRENT_SHA="${{ github.sha }}"
          LAST_SUCCESSFUL_SHA="${{ steps.get-last-release-sha.outputs.last_release_sha }}"

          echo "Current dev branch SHA: $CURRENT_SHA"
          echo "Last successful build SHA: $LAST_SUCCESSFUL_SHA"

          if [ -z "$LAST_SUCCESSFUL_SHA" ]; then
            echo "No previous successful build found. Proceeding with build."
            echo "should_build=true" >> $GITHUB_OUTPUT
          elif [ "$CURRENT_SHA" == "$LAST_SUCCESSFUL_SHA" ]; then
            echo "No new commits since last successful build. Skipping build."
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "New commits detected. Proceeding with build."
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi
  #   
  build-dev:
    name: build
    runs-on: ubuntu-latest
    needs: check-for-updates
    if: needs.check-for-updates.outputs.should_build == 'true'
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: dev      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Build and release
        id: goreleaser
        uses: goreleaser/goreleaser-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: true
        with:
          version: "~> v2"
          distribution: goreleaser
          args: release --snapshot --clean
      - name: Grab dev release version from metadata
        id: version
        run: |
          jq . ./dist/metadata.json
          version=$(jq -r '.version' ./dist/metadata.json)
          echo "verson:$version"
          echo "version=$version" >> $GITHUB_OUTPUT
      - name: Grab changelog md from current
        id: changelog
        env:
          ChangelogPath: ./changelog/current
        run: |
          CHANGELOG_DETAILS=""
          for file in $ChangelogPath/*.md; do
            echo "Processing file: $file"
            # Append the content of each file.
            # You might want to add a header for each file for better readability,
            # e.g., "## $(basename "$file" .md)\n\n$(cat "$file")\n"
            PrNumber=$(basename "$file" .md)
            CHANGELOG_DETAILS="${CHANGELOG_DETAILS}### [$PrNumber](https://github.com/WithHolm/polyenv/pull/$PrNumber)\n\n"
            CHANGELOG_DETAILS="${CHANGELOG_DETAILS}$(cat "$file")\n\n"
          done

          # Set the combined content as a multi-line environment variable
          # This makes it available to subsequent steps via ${{ env.CHANGELOG_DETAILS }}
          echo "CHANGELOG_DETAILS<<EOF" >> $GITHUB_ENV
          echo -e "$CHANGELOG_DETAILS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: polyenv-dev
          path: dist/*
      - name: Delete old tag and release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #delete old tag
          git push --delete origin ${{ env.release_tag }} || true
          #delete old release
          gh release delete ${{ env.release_tag }}--yes || true
      - name: Upload Contents to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          tag: ${{ env.release_tag }}
          release_name: ${{ env.release_name }}
          file_glob: true
          prerelease: true
          overwrite: true
          target_commit: ${{ github.sha }}
          body: |
            # DEV RELEASE

            release created by github action
            THIS IS A DEV RELEASE. DO NOT USE THIS IN PRODUCTION. or do.. i don't care

            ${{ env.CHANGELOG_DETAILS }}
          make_latest: false