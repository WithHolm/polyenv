name: Go CI

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  lint:
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true
      - name: Run linter
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest

  changed-packages:
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.unique-directories.outputs.directories }}
      changed: ${{ steps.changed-files.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            **/*_test.go
            **/*.go
            **/*.mod
          files_ignore: |
            vendor/**
          matrix: true
      - name: Get unique directories
        id: unique-directories
        run: |
          DIRS=$(echo '${{ steps.changed-files.outputs.all_changed_files }}' | jq -r '.[]' | xargs -I {} dirname {} | sort -u | jq -R -s -c 'split("\n")[:-1]')
          echo "unique directories: $DIRS"
          echo "directories=$DIRS" >> $GITHUB_OUTPUT

  run_package_tests:
    needs: [changed-packages]
    if: github.actor != 'dependabot[bot]' && ${{ needs.changed-packages.outputs.changed == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        packages: ${{ fromJSON(needs.changed-packages.outputs.matrix) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true
      - name: Run test for ${{ matrix.packages }}
        run: |
          if [ "${{ matrix.packages }}" != "." ]; then
          go test -v -race "${{ matrix.packages }}"
          fi
      - name: Run govulncheck for ${{ matrix.packages }}
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          if [ "${{ matrix.packages }}" = "." ]; then
            govulncheck ./...
          else
            govulncheck "${{ matrix.packages }}"
          fi
